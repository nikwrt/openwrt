--- a/arch/mips/ar7/platform.c
+++ b/arch/mips/ar7/platform.c
@@ -34,6 +34,8 @@
 #include <linux/etherdevice.h>
 #include <linux/phy.h>
 #include <linux/gpio.h>
+#include <linux/gpio_buttons.h>
+#include <linux/input.h>
 #include <linux/clk.h>
 
 #include <asm/addrspace.h>
@@ -505,6 +507,34 @@ static void __init detect_leds(void)
 }
 
 /*****************************************************************************
+ * Buttons
+ ****************************************************************************/
+static struct gpio_button ar7_gpio_buttons[] = {
+	{
+		.desc		= "reset",
+		.type		= EV_KEY,
+		.code		= BTN_0,
+		.threshold	= 5,
+		.gpio		= 11,
+		.active_low	= 1,
+	}
+};
+
+static struct gpio_buttons_platform_data ar7_gpio_buttons_data = {
+	.buttons	= ar7_gpio_buttons,
+	.nbuttons	= ARRAY_SIZE(ar7_gpio_buttons),
+	.poll_interval	= 20,
+};
+
+static struct platform_device ar7_gpio_buttons_device = {
+	.name	= "gpio-buttons",
+	.id	= -1,
+	.dev	= {
+		.platform_data  = &ar7_gpio_buttons_data,
+	},
+};
+
+/*****************************************************************************
  * Watchdog
  ****************************************************************************/
 static struct resource ar7_wdt_res = {
@@ -659,6 +689,10 @@ static int __init ar7_register_devices(v
 	if (res)
 		pr_warning("unable to register leds: %d\n", res);
 
+	res = platform_device_register(&ar7_gpio_buttons_device);
+	if (res)
+		pr_warning("unable to register buttons: %d\n", res);
+
 	res = platform_device_register(&ar7_udc);
 	if (res)
 		pr_warning("unable to register usb slave: %d\n", res);
